// Mocks generated by Mockito 5.1.0 from annotations
// in ditonton/test/presentation/bloc/tv_series/tv_search_bloc_test.dart.
// Do not manually edit this file.

import 'dart:async' as _i4;

import 'package:bloc/bloc.dart' as _i7;
import 'package:dartz/dartz.dart' as _i6;
import 'package:ditonton/common/failure.dart' as _i8;
import 'package:ditonton/domain/entities/tv_entities/tv.dart' as _i9;
import 'package:ditonton/domain/repositories/tv_repository.dart' as _i5;
import 'package:ditonton/domain/usecases/tv_usecases/search_tv.dart' as _i2;
import 'package:ditonton/presentation/bloc_provider/tv_provider/search_tv_series/search_tv_series_bloc.dart'
    as _i3;
import 'package:mockito/mockito.dart' as _i1;

// ignore_for_file: type=lint
// ignore_for_file: avoid_redundant_argument_values
// ignore_for_file: avoid_setters_without_getters
// ignore_for_file: comment_references
// ignore_for_file: implementation_imports
// ignore_for_file: invalid_use_of_visible_for_testing_member
// ignore_for_file: prefer_const_constructors
// ignore_for_file: unnecessary_parenthesis
// ignore_for_file: camel_case_types

class _FakeSearchTv_0 extends _i1.Fake implements _i2.SearchTv {}

class _FakeSearchTvSeriesState_1 extends _i1.Fake
    implements _i3.SearchTvSeriesState {}

class _FakeStreamSubscription_2<T> extends _i1.Fake
    implements _i4.StreamSubscription<T> {}

class _FakeTvRepository_3 extends _i1.Fake implements _i5.TvRepository {}

class _FakeEither_4<L, R> extends _i1.Fake implements _i6.Either<L, R> {}

/// A class which mocks [SearchTvSeriesBloc].
///
/// See the documentation for Mockito's code generation for more information.
class MockSearchTvSeriesBloc extends _i1.Mock
    implements _i3.SearchTvSeriesBloc {
  MockSearchTvSeriesBloc() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i2.SearchTv get searchTv => (super.noSuchMethod(Invocation.getter(#searchTv),
      returnValue: _FakeSearchTv_0()) as _i2.SearchTv);
  @override
  _i3.SearchTvSeriesState get state => (super.noSuchMethod(
      Invocation.getter(#state),
      returnValue: _FakeSearchTvSeriesState_1()) as _i3.SearchTvSeriesState);
  @override
  _i4.Stream<_i3.SearchTvSeriesState> get stream =>
      (super.noSuchMethod(Invocation.getter(#stream),
              returnValue: Stream<_i3.SearchTvSeriesState>.empty())
          as _i4.Stream<_i3.SearchTvSeriesState>);
  @override
  bool get isClosed =>
      (super.noSuchMethod(Invocation.getter(#isClosed), returnValue: false)
          as bool);
  @override
  void add(_i3.SearchTvSeriesEvent? event) =>
      super.noSuchMethod(Invocation.method(#add, [event]),
          returnValueForMissingStub: null);
  @override
  void onEvent(_i3.SearchTvSeriesEvent? event) =>
      super.noSuchMethod(Invocation.method(#onEvent, [event]),
          returnValueForMissingStub: null);
  @override
  _i4.Stream<_i7.Transition<_i3.SearchTvSeriesEvent, _i3.SearchTvSeriesState>>
      transformEvents(
              _i4.Stream<_i3.SearchTvSeriesEvent>? events,
              _i7.TransitionFunction<_i3.SearchTvSeriesEvent, _i3.SearchTvSeriesState>?
                  transitionFn) =>
          (super.noSuchMethod(
                  Invocation.method(#transformEvents, [events, transitionFn]),
                  returnValue:
                      Stream<_i7.Transition<_i3.SearchTvSeriesEvent, _i3.SearchTvSeriesState>>.empty())
              as _i4.Stream<
                  _i7.Transition<_i3.SearchTvSeriesEvent, _i3.SearchTvSeriesState>>);
  @override
  void emit(_i3.SearchTvSeriesState? state) =>
      super.noSuchMethod(Invocation.method(#emit, [state]),
          returnValueForMissingStub: null);
  @override
  void on<E extends _i3.SearchTvSeriesEvent>(
          _i7.EventHandler<E, _i3.SearchTvSeriesState>? handler,
          {_i7.EventTransformer<E>? transformer}) =>
      super.noSuchMethod(
          Invocation.method(#on, [handler], {#transformer: transformer}),
          returnValueForMissingStub: null);
  @override
  _i4.Stream<_i3.SearchTvSeriesState> mapEventToState(
          _i3.SearchTvSeriesEvent? event) =>
      (super.noSuchMethod(Invocation.method(#mapEventToState, [event]),
              returnValue: Stream<_i3.SearchTvSeriesState>.empty())
          as _i4.Stream<_i3.SearchTvSeriesState>);
  @override
  void onTransition(
          _i7.Transition<_i3.SearchTvSeriesEvent, _i3.SearchTvSeriesState>?
              transition) =>
      super.noSuchMethod(Invocation.method(#onTransition, [transition]),
          returnValueForMissingStub: null);
  @override
  _i4.Stream<_i7.Transition<_i3.SearchTvSeriesEvent, _i3.SearchTvSeriesState>>
      transformTransitions(
              _i4.Stream<_i7.Transition<_i3.SearchTvSeriesEvent, _i3.SearchTvSeriesState>>?
                  transitions) =>
          (super.noSuchMethod(
                  Invocation.method(#transformTransitions, [transitions]),
                  returnValue:
                      Stream<_i7.Transition<_i3.SearchTvSeriesEvent, _i3.SearchTvSeriesState>>.empty())
              as _i4.Stream<
                  _i7.Transition<_i3.SearchTvSeriesEvent, _i3.SearchTvSeriesState>>);
  @override
  _i4.Future<void> close() => (super.noSuchMethod(Invocation.method(#close, []),
      returnValue: Future<void>.value(),
      returnValueForMissingStub: Future<void>.value()) as _i4.Future<void>);
  @override
  _i4.StreamSubscription<_i3.SearchTvSeriesState> listen(
          void Function(_i3.SearchTvSeriesState)? onData,
          {Function? onError,
          void Function()? onDone,
          bool? cancelOnError}) =>
      (super.noSuchMethod(
              Invocation.method(#listen, [
                onData
              ], {
                #onError: onError,
                #onDone: onDone,
                #cancelOnError: cancelOnError
              }),
              returnValue: _FakeStreamSubscription_2<_i3.SearchTvSeriesState>())
          as _i4.StreamSubscription<_i3.SearchTvSeriesState>);
  @override
  void onChange(_i7.Change<_i3.SearchTvSeriesState>? change) =>
      super.noSuchMethod(Invocation.method(#onChange, [change]),
          returnValueForMissingStub: null);
  @override
  void addError(Object? error, [StackTrace? stackTrace]) =>
      super.noSuchMethod(Invocation.method(#addError, [error, stackTrace]),
          returnValueForMissingStub: null);
  @override
  void onError(Object? error, StackTrace? stackTrace) =>
      super.noSuchMethod(Invocation.method(#onError, [error, stackTrace]),
          returnValueForMissingStub: null);
}

/// A class which mocks [SearchTv].
///
/// See the documentation for Mockito's code generation for more information.
class MockSearchTv extends _i1.Mock implements _i2.SearchTv {
  MockSearchTv() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i5.TvRepository get tvRepository =>
      (super.noSuchMethod(Invocation.getter(#tvRepository),
          returnValue: _FakeTvRepository_3()) as _i5.TvRepository);
  @override
  _i4.Future<_i6.Either<_i8.Failure, List<_i9.Tv>>> execute(String? query) =>
      (super.noSuchMethod(Invocation.method(#execute, [query]),
              returnValue: Future<_i6.Either<_i8.Failure, List<_i9.Tv>>>.value(
                  _FakeEither_4<_i8.Failure, List<_i9.Tv>>()))
          as _i4.Future<_i6.Either<_i8.Failure, List<_i9.Tv>>>);
}
